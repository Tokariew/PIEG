#:kivy 1.10
#:set swidth dp(90)
#:set sheight dp(40)
#:set sfont sp(13)
#:set dark (34/255, 34/255, 34/255, 1)
#:set green (34/255, 139/255, 34/255, 1)
#:set white (1, 1, 1, 1)
#:set nan float('nan')
#:import isnan math.isnan
#:import Factory kivy.factory.Factory
#:import Window kivy.core.window
<EWidget@Widget>:
    size_hint: (1, 1)
    width: root.width
    height: root.height

<CLabel@Label>:
    width: swidth
    height: 3 * sheight // 4
    font_size: sfont
    size_hint: None, None
    pos_hint: {'center_x': 0.5}
    halign: 'center'
    valign: 'middle'

<CButton@Button>:
    width: swidth
    height: 3 * sheight // 4
    font_size: sfont
    size_hint: None, None
    pos_hint: {'center_x': 0.5}

<CSTextInput@TextInput>:
    width: swidth
    height: 3 * sheight // 4
    font_size: sfont
    size_hint: None, None
    pos_hint: {'center_x': 0.5}
    halign: 'center'
    multiline: False

<CTextInput@CSTextInput>:
    data: nan
    param: ''
    text: '' if isnan(self.data) else '{:g}'.format(self.data)
    disabled: False if isnan(self.data) else True
    user: False
    on_focus: app.main.validate_input(self)
    on_text: app.main.help_me(self)
    #background_disabled_normal: ''
    #disabled_color: green if self.user else white
    background_color: green if self.user else white

<PTextInput@CSTextInput>:
    data: 1
    text: '' if isnan(self.data) else '{:g}'.format(self.data)
    on_focus: app.main.validate_popup_input(self)
    hint_text: '1'

<CCheckBox@CheckBox>:
    height: 3 * sheight // 4
    size_hint_y: None
    allow_no_selection: False

<GBoxLayout@BoxLayout>:
    height: 3 * sheight / 4
    size_hint_y: None
    pos_hint: {'center_x': 0.5}

<CSpinnerOption@SpinnerOption>:
    font_size: sfont
    height: 3 * sheight / 4

<CSpinner@Spinner>
    size_hint: 1, None
    height: 3 * sheight / 4
    sync_height: True
    font_size: sfont
    option_cls: Factory.get("CSpinnerOption")


<IterPopup>:
    title: 'Iteration'
    id: iter_pop
    BoxLayout:
        orientation: 'vertical'
        GridLayout:
            cols: 4
            CLabel:
                text: 'Dimensions'
                size_hint_x: 1
            CLabel:
                text: 'Range of Elements'
                size_hint_x: 1
            CLabel:
                text: 'Target dim.'
                size_hint_x: 1
            CLabel:
                text: 'Start value'
                size_hint_x: 1
            GBoxLayout:
                orientation: 'horizontal'
                CCheckBox:
                    active: True
                    group: 'dim'
                    id: d_check
                CLabel:
                    size_hint_x: 1
                    text: 'd'
                CCheckBox:
                    group: 'dim'
                    id: L_check
                CLabel:
                    text: 'L'
                    size_hint_x: 1
                CCheckBox:
                    group: 'dim'
                CLabel:
                    text: 'T'
                    size_hint_x: 1
            GBoxLayout:
                orientation: 'horizontal'
                CLabel:
                    text: 'From'
                    size_hint_x: 1
                CSpinner:
                    text: '0'
                    size_hint_x: 1
                    id: iter_from_input
                    values: [str(item) for item in range(root.cols)]
                CLabel:
                    text: 'To'
                    size_hint_x: 1
                CSpinner:
                    text: '0'
                    size_hint_x: 1
                    id: iter_to_input
                    values: [str(item) for item in range(root.cols)]
            PTextInput:
                size_hint_x: 1
                id: iter_target_input
            PTextInput:
                size_hint_x: 1
                id: iter_start_input
            CLabel:
                text: 'Iterated parametr'
                size_hint_x: 1
            CSpinner
                text: 'f'
                size_hint: 1, None
                height: 3 * sheight / 4
                id: iter_row
                values: ['f', 'd', 'H', '\u03B1', 'V', 'L', 'Y', '\u03B2', 'Q', 'T']
            CSpinner:
                text: '0'
                size_hint: 1, None
                height: 3 * sheight / 4
                id: iter_col
                values: [str(item) for item in range(root.cols)]
        EWidget:
        GBoxLayout:
            orientation: 'horizontal'
            EWidget
            CButton:
                text: 'ok'
                on_release: iter_pop.dismiss()
                on_release: app.main.iterate(d_check.active, L_check.active, iter_from_input.text, iter_to_input.text, iter_target_input.text, iter_start_input.text, iter_row.text, iter_col.text)

<MagPopup>:
    title: 'Magnify'
    id: mag_pop
    BoxLayout:
        orientation: 'vertical'
        GridLayout:
            cols: 3
            CLabel:
                text: 'Kind of magnification'
                size_hint_x: 1
            CLabel:
                text: 'Between elements'
                size_hint_x: 1
            CLabel:
                text: 'Magnification value'
                size_hint_x: 1
            GBoxLayout:
                orientation: 'horizontal'
                size_hint_x: 1
                CLabel:
                    text: 'Aperture'
                    size_hint_x: 1
                CLabel:
                    text: 'Field'
                    size_hint_x: 1
            GBoxLayout:
                orientation: 'horizontal'
                size_hint_x: 1
                CLabel:
                    text: 'From'
                    size_hint_x: 1
                CLabel:
                    text: 'To'
                    size_hint_x: 1
            GBoxLayout:
            GBoxLayout:
                orientation: 'horizontal'
                CCheckBox:
                    active: True
                    group: 'mag'
                    id: v_check
                CLabel:
                    text: 'V'
                    size_hint_x: 1
                CCheckBox:
                    group: 'mag'
                CLabel:
                    text: 'Q'
                    size_hint_x: 1

            GBoxLayout:
                orientation: 'horizontal'
                CSpinner:
                    text: '1'
                    id: mag_from_input
                    values: [str(item) for item in range(1, root.cols)]
                CSpinner:
                    text: '1'
                    id: mag_to_input
                    values: [str(item) for item in range(1, root.cols)]
            PTextInput:
                size_hint_x: 1
                id: mag_val_input
        EWidget:
        GBoxLayout:
            orientation: 'horizontal'
            EWidget
            CButton:
                text: 'ok'
                on_release: mag_pop.dismiss()
                on_release: app.main.magnify(v_check.active, mag_from_input.text, mag_to_input.text, mag_val_input.text)


<Col>:
    orientation: 'vertical'
    size_hint: None, None
    width: self.minimum_width
    height: self.minimum_height
    col_number: 0
    f: nan
    d: nan
    h: nan
    alpha: nan
    v: nan
    l: nan
    y1: nan
    beta: nan
    q: nan
    t: nan
    phi: nan
    par_q: ['f', 'd', 'h', 'alpha', 'v', 'l', 'y1', 'beta', 'q', 't', 'phi']
    CLabel:
        text: str(root.col_number)
    CTextInput:
        data: root.f
        background_color: dark if root.col_number + 1 == len(app.main.ids.table.data) or root.col_number == 0 else green if self.user else white
        param: 'f'
    CTextInput:
        data: root.d
        background_color: dark if root.col_number + 1 == len(app.main.ids.table.data) else green if self.user else white
        param: 'd'
    CTextInput:
        data: root.h
        param: 'h'
    CTextInput:
        data: root.alpha
        background_color: dark if root.col_number + 1 == len(app.main.ids.table.data) else green if self.user else green if self.user else white
        param: 'alpha'
    CTextInput:
        data: root.v
        background_color: dark if root.col_number + 1 == len(app.main.ids.table.data) or root.col_number == 0 else green if self.user else white
        param: 'v'
    CTextInput:
        data: root.l
        background_color: dark if root.col_number + 1 == len(app.main.ids.table.data) or root.col_number == 0 else green if self.user else white
        param: 'l'
    CTextInput:
        data: root.y1
        param: 'y1'
    CTextInput:
        data: root.beta
        background_color: dark if root.col_number + 1 == len(app.main.ids.table.data) else green if self.user else white
        param: 'beta'
    CTextInput:
        data: root.q
        background_color: dark if root.col_number + 1 == len(app.main.ids.table.data) or root.col_number == 0 else green if self.user else white
        param: 'q'
    CTextInput:
        data: root.t
        background_color: dark if root.col_number + 1 == len(app.main.ids.table.data) or root.col_number == 0 else green if self.user else white
        param: 't'
    CLabel:
        #data: root.phi
        text: '' if isnan(root.phi) else '{:0.2f}'.format(root.phi)
        param: 'phi'

<RV>:
    id: table
    viewclass: 'Col'
    scroll_type: ['bars', 'content']
    scroll_wheel_distance: '114dp'
    bar_height: '30dp'
    SelectableRecycleBoxLayout:
        default_size: None, None
        default_size_hint: None, None
        size_hint: None, None
        width: self.minimum_width
        height: self.minimum_height
        orientation: 'horizontal'

<NosWidget>:
    id: nos
    BoxLayout:
        orientation: 'vertical'
        BoxLayout:
            orientation: 'horizontal'
            height: self.minimum_height
            size_hint_y: None
            CLabel:
                text: 'Number of\nelements:'
            CSTextInput:
                id: noe_input
                input_filter: 'int'
                focus: True
                on_text_validate: app.nos.validate_input(self)
        EWidget
        BoxLayout:
            size_hint_y: None
            height: sheight
            CLabel:
                text: 'Info Label'
                id: info_label
                size_hint_x: 1
                pos_hint: {'x': 0.1}
                text_size: self.size
                halign: 'left'

<MainWidget>:
    id:main
    BoxLayout:
        background_color: 0,0,1,.5
        orientation: 'vertical'
        BoxLayout:
            orientation: 'horizontal'
            size_hint_y: None
            height: self.minimum_height
            CButton:
                text: 'New'
                on_release: app.sm.current = 'nos'
                on_release: lhi_label.data = nan
                on_release: vignette_input.data = nan
                on_release: app.nos.noe_input.focus = True
            CButton:
                text: 'Magnify'
                on_release: main.mag_pop.open()
            CButton:
                text: 'Iteration'
                on_release: main.iter_pop.open()
            CButton:
                text: 'Plot'
                on_release: main.plot()
            CButton:
                text: 'Export'
                on_release: main.export()
			CButton:
                text: 'History'
                on_release: main.history()
            CButton:
                text: 'screenshot'
                on_release: main.capture()
        BoxLayout:
            orientation: 'horizontal'
            pos_hint: {'center_x': 0.5}
            size_hint_y: None
            height: self.minimum_height
            BoxLayout:
                orientation: 'vertical'
                size_hint: None, None
                width: self.minimum_width
                height: self.minimum_height
                CLabel:
                    text: 'number'
                CLabel:
                    text: 'f'
                CLabel:
                    text: 'd'
                CLabel:
                    text: 'H'
                CLabel:
                    text: '\u03B1'
                CLabel:
                    text: 'V'
                CLabel:
                    text: 'L'
                CLabel:
                    text: 'Y'
                CLabel:
                    text: '\u03B2'
                CLabel:
                    text: 'Q'
                CLabel:
                    text: 'T'
                CLabel:
                    text: '\u03A6 \u2090'
                EWidget
            RV:
                id: table
        BoxLayout:
            orientation: 'horizontal'
            height: sheight
            size_hint_y: None
            CLabel:
                id: lhi_label
                data: nan
                text: 'LHI: {:g}'.format(float(self.data)) if not isnan(float(self.data)) else 'LHI:'
            CLabel:
                text: 'vignette'
            CTextInput:
                id: vignette_input
                param: 'vignette'
                data: nan
        EWidget
        BoxLayout:
            size_hint_y: None
            height: sheight
            CLabel:
                text: 'Info Label'
                id: info_label
                size_hint_x: 1
                pos_hint: {'x': 0.1}
                text_size: self.size
                halign: 'left'
